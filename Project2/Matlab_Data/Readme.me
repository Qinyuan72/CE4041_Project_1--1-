# 3D Height Map of Decision Boundary

## Project Overview
This project visualizes a **3D height map** of decision boundaries using data generated by a classification model (e.g., AdaBoost). The visualization is rendered in MATLAB to analyze the model's predictions and decision regions.

---

## Files Included

### MATLAB Code
- **`Plot.m`**: Main script for plotting the original 3D height map.
- **`Plot_2.m`**: Enhanced plotting script with anti-aliasing, lighting, and improved visuals.

### Data Files
- **`custom_xx_values.csv`**: X-coordinates of the mesh grid.
- **`custom_yy_values.csv`**: Y-coordinates of the mesh grid.
- **`custom_Z_values.csv`**: Z-values representing the decision boundary (predictions).

### Figures
- **`Enhanced_Finger.fig`** and **`.jpg`**: Enhanced figure with smoother rendering and lighting.
- **`Fixed_Aliasing_Plot.fig`** and **`.jpg`**: Plot with anti-aliasing and shading improvements.
- **`Fig1.jpg`, `Fig2.jpg`, `Fig3.jpg`**: Initial renders of the decision boundary.

---

## Instructions

### Load Data
Ensure the data files (`custom_xx_values.csv`, `custom_yy_values.csv`, `custom_Z_values.csv`) are in the same directory as the MATLAB scripts.

### Run MATLAB Script
1. Open MATLAB.
2. Run `Plot.m` for the original plot or `Plot_2.m` for enhanced visualization.

### Output
- The script will render a **3D surface plot** showing decision boundaries.
- Adjust the view angle and lighting to explore the surface.

---

## Features

### Original Plot
- Basic 3D surface visualization of decision boundaries.
- Suitable for initial analysis.

### Enhanced Visualization
- Anti-aliasing applied for smoother rendering.
- Lighting effects and `Phong shading` for depth perception.
- High-quality rendering with vivid color representation using `jet` colormap.

---

## Customization

You can adjust mesh grid resolution and visualization settings directly in the scripts for finer details:

```matlab
resolution = 0.01; % Adjust for finer resolution
colormap('jet');   % Modify for different color themes
view(45, 30);      % Adjust viewing angles
